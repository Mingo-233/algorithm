/**
 * 插入排序的核心思想是“找到元素在它前面那个序列中的正确位置”。
具体来说，插入排序所有的操作都基于一个这样的前提：当前元素前面的序列是有序的。基于这个前提，从后往前去寻找当前元素在前面那个序列里的正确位置。

最好时间复杂度：它对应的数组本身就有序这种情况。此时内层循环只走一次，整体复杂度取决于外层循环，时间复杂度就是一层循环对应的 O(n)。
最坏时间复杂度：它对应的是数组完全逆序这种情况。此时内层循环每次都要移动有序序列里的所有元素，因此时间复杂度对应的就是两层循环的 O(n^2)
平均时间复杂度：O(n^2)

 */

let a = [5, 3, 2, 4, 1]
function insertSort(arr) {
  const len = arr.length
  // i从1 开始，前面的数据只有一个，所以可以看成有序数组。当i为2时，前面的两位就是一个有序数组，当i为3，以此类推。。
  for (let i = 1; i < len; i++) {
    // 记录当前值
    let temp = arr[i]
    let j = i
    // 若前面的数值小于当前数值
    while (j>0 && arr[j-1]>temp) {
      // j前面的数字让出空位（此时的j-1 位置就是空位），留给temp插入
      arr[j] = arr[j-1]
      j--
    }
    // 这里的arr[j]就是上面的空位，因为经历了一次j-- 
    arr[j] = temp
  }
  return arr
}
console.log(insertSort(a));